Q1 Describe the singleton pattern along with its advantages and disadvantages.
- Singleton pattern belongs to the category of the creational pattern. It restricts the instance of a class to just one and can coordinate actions across the whole system. 
The singleton design pattern is helpful, as we can use it repeatedly without recreating a new object for every request. It also does not support inheritance and can be easily broken.

Q2 Describe the factory pattern.
- The factory pattern is a creational design pattern that acts as a container for the creational logic, 
separating it from dependent code to allow specific subclasses to change the extension without affecting the main API.

Let’s consider 3 classes Square, Rectangle and Triangle. We will be using factory patterns to create objects of these three classes without exposing the creation logic by making use of ShapeFactory class. 
The Driver class would be passing the information like RECTANGLE/SQUARE/TRIANGLE for getting the required object. 

Step 1: Create a Shape interface.
   //Shape.java
   public interface Shape {
      void draw();
   }
   
Step 2: Create concrete classes Rectangle, Square, Triangle that implements the Shape interface.
public class Rectangle implements Shape {
      @Override
      public void draw() {
         System.out.println("Rectangle Drawn");
      }
   }
   //Square.java
   public class Square implements Shape {
      @Override
      public void draw() {
         System.out.println("Square Drawn");
      }
   }
   //Triangle.java
   public class Triangle implements Shape {
      @Override
      public void draw() {
         System.out.println("Triangle Drawn");
      }
   }
   
Step 3: Create ShapeFactory class and create a method called getShapeInstance() for generating objects of the concrete classes defined above.
   //ShapeFactory.java
   public class ShapeFactory {
      //the method will be used to get object of required shape
      public Shape getShapeInstance(String type){
         if(type == null){
            return null;
         } 
         if(type.equalsIgnoreCase("TRIANGLE")){
            return new Triangle();
         } else if(type.equalsIgnoreCase("SQUARE")){
            return new Square();
         } else if(type.equalsIgnoreCase("RECTANGLE")){
            return new Rectangle();
         }
         return null;
      }
   }
   
Step 4: Implement the Driver class and utilise the factory class for getting the object of the required type.
   //Driver.java
   public class Driver {
      public static void main(String[] args) {
         ShapeFactory shapeFactory = new ShapeFactory();
         //get Triangle object and call draw()
         Shape triangle = shapeFactory.getShape("Triangle");
         triangle.draw();
         //get Rectangle object and call draw()
         Shape rectangle = shapeFactory.getShape("RECTANGLE");
         rectangle.draw();
         //get Square object and call draw()
         Shape square = shapeFactory.getShape("SQUARE");
         square.draw();
      }
   }
   
Step 5: Validate the output
The output of this implementation would be:
  Triangle Drawn
  Rectangle Drawn
  Square Drawn   

The advantages of a factory design pattern are:
1) This pattern allows hiding the creation logic of the application by using interfaces and factory classes.
2) It lets to test the seamlessness of the application by using mock or stubs.
3) Introduces loose coupling in the application by allowing flexibility in the implementation of methods when new classes are introduced

Q3 What is Inversion of Control?
- Inversion of control is a pattern used to decouple the dependencies between layers and components in the system. 
The Dependency-Injection (DI) pattern is an example of an IoC pattern that helps in removing dependencies in the code.

Consider we have a class A that makes use of class B as shown below
public class A{
   private B b;
   
   public A(){
       this.b = new B();
   }
}

Here, we have a dependency between classes A and B. 
If we had the IoC pattern implemented, we would not have used the new operator to assign value to the dependent variable. 
It would have been something as shown below:
public class A {
   private IocB b;
   public A(IocB b) {
       this.b = b;
   }
}
We have inverted the control of handing the dependency of instantiating the object of class B to the IoC class IocB.

Q4 What are the SOLID Principles?

S - Single Responsibility Principle (SRP): The single responsibility principle ensures that every class or module should be accountable and responsible for only one functionality. 
There should be one and only one reason for changing any class.
O - Open Closed Principle (OCP): Every class is open for extension but closed for modification. Here, we are allowed to extend the entities behaviour by not modifying anything in the existing source code.
L - Liskov Substitution Principle(LSP): LSP principle states that the objects can be replaced by the subtype instances without affecting the correctness of the program.
I - Interface Segregation Principle (ISP): The ISP principle states that we can use as many interfaces specific to the client’s requirements instead of creating only one general interface. 
Clients should not be forced to implement the functionalities that they do not require.
D - Dependency Inversion Principle: Here, the high-level modules should not be dependent on the lower level modules or concrete implementations. Instead, they should be dependent on the abstractions
